import streamlit as st
from transformers import AutoTokenizer, AutoModelForCausalLM
import re
import time

# Load models
incoder_tokenizer = AutoTokenizer.from_pretrained("facebook/incoder-1B")
incoder_model = AutoModelForCausalLM.from_pretrained("facebook/incoder-1B")

# Check and set the padding token
if incoder_tokenizer.pad_token is None:
    incoder_tokenizer.add_special_tokens({'pad_token': '[PAD]'})

def read_file(uploaded_file):
    """Read the uploaded file (C++ or Java) and return its content as a string."""
    return uploaded_file.read().decode("utf-8")

def convert_cpp_to_java(cpp_code):
    """Convert C++ code to Java code using the Incoder model."""
    prompt = (
        "You are a programming assistant. "
        "Convert the following C++ code to Java code completely:\n"
        f"{cpp_code}\n"
        "Java code:"
    )
    inputs = incoder_tokenizer(prompt, return_tensors="pt", padding=True, truncation=True, max_length=512)
    output_sequences = incoder_model.generate(
        inputs['input_ids'], 
        attention_mask=inputs['attention_mask'], 
        max_new_tokens=500
    )
    
    java_code = incoder_tokenizer.decode(output_sequences[0], skip_special_tokens=True).strip()

    if "Java code:" in java_code:
        java_code = java_code.split("Java code:")[-1].strip()

    cleaned_java_code = re.sub(r'<\/?code.*|<\|.*|\bThanks for your answer\b.*', '', java_code, flags=re.DOTALL).strip()

    return cleaned_java_code

def fix_syntax_errors(java_code):
    """Fix syntax errors in the Java code using the Incoder model."""
    prompt = (
        "You are a programming assistant. "
        "Fix any syntax errors in the following Java code:\n"
        f"{java_code}\n"
        "Corrected Java code:"
    )
    inputs = incoder_tokenizer(prompt, return_tensors="pt", padding=True, truncation=True, max_length=512)
    output_sequences = incoder_model.generate(
        inputs['input_ids'], 
        attention_mask=inputs['attention_mask'], 
        max_new_tokens=500
    )
    
    corrected_java_code = incoder_tokenizer.decode(output_sequences[0], skip_special_tokens=True).strip()

    if "Corrected Java code:" in corrected_java_code:
        corrected_java_code = corrected_java_code.split("Corrected Java code:")[-1].strip()

    cleaned_corrected_code = re.sub(r'<\/?code.*|<\|.*|\bThanks for your answer\b.*', '', corrected_java_code, flags=re.DOTALL).strip()

    return cleaned_corrected_code

def main():
    """Main function to run the Streamlit app."""
    st.set_page_config(page_title="C++ to Java Converter with Error Fixing", layout="wide")
    st.title("C++ to Java Converter with Syntax Fixing")

    st.sidebar.header("Options")
    st.sidebar.info("Upload your C++ or Java code files for conversion and fixing.")

    # First part: Convert C++ to Java
    uploaded_file = st.file_uploader("Choose a C++ file", type=["cpp", "h", "hpp"])
    
    if uploaded_file is not None:
        cpp_code = read_file(uploaded_file)
        st.subheader("Uploaded C++ Code:")
        st.code(cpp_code, language='cpp')

        # Convert C++ to Java
        if st.button("Convert C++ to Java"):
            with st.spinner("Converting..."):
                java_code = convert_cpp_to_java(cpp_code)
                st.success("Conversion completed!")
                st.subheader("Generated Java Code:")
                st.code(java_code, language='java')

                # Download button for the generated Java code
                st.download_button(
                    label="Download Java Code",
                    data=java_code,
                    file_name="converted_code.java",
                    mime="text/java"
                )

    # Second part: Fix syntax errors in Java code
    st.write("---")
    st.subheader("Upload Java File to Fix Syntax Errors")
    
    uploaded_java_file = st.file_uploader("Choose a Java file", type=["java"], key="java_file")
    
    if uploaded_java_file is not None:
        java_code = read_file(uploaded_java_file)
        st.subheader("Uploaded Java Code:")
        st.code(java_code, language='java')

        # Fix syntax errors
        if st.button("Fix Syntax Errors"):
            with st.spinner("Fixing errors..."):
                fixed_code = fix_syntax_errors(java_code)
                st.success("Syntax errors fixed!")
                st.subheader("Corrected Java Code:")
                st.code(fixed_code, language='java')

                # Download button for the corrected Java code
                st.download_button(
                    label="Download Corrected Java Code",
                    data=fixed_code,
                    file_name="corrected_code.java",
                    mime="text/java"
                )

if __name__ == "__main__":
    main()
